import pandas as pd
from .multiply import main


def test_numeric():
    assert main(a=17.3, b=16.7)["product"] == 288.91


def test_series_numeric():
    assert main(
        a=pd.Series(
            {
                "2019-08-01T15:20:12": 1.2,
                "2019-08-01T15:44:12": None,
                "2019-08-03T16:20:15": 0.3,
                "2019-08-05T12:00:34": 0.5,
            }
        ),
        b=-5,
    )["product"].equals(
        pd.Series(
            {
                "2019-08-01T15:20:12": -6,
                "2019-08-01T15:44:12": None,
                "2019-08-03T16:20:15": -1.5,
                "2019-08-05T12:00:34": -2.5,
            }
        )
    )


def test_series_series():
    assert main(
        a=pd.Series(
            {
                "2019-08-01T15:20:12": 1.2,
                "2019-08-01T15:44:12": None,
                "2019-08-03T16:20:15": 0.3,
                "2019-08-05T12:00:34": 0.5,
            }
        ),
        b=pd.Series(
            {
                "2019-08-01T15:20:12": 1.1,
                "2019-08-01T15:44:12": 1.2,
                "2019-08-03T16:20:15": 1.3,
                "2019-08-05T12:00:34": 1.4,
            }
        ),
    )["product"].equals(
        pd.Series(
            {
                "2019-08-01T15:20:12": 1.32,
                "2019-08-01T15:44:12": None,
                "2019-08-03T16:20:15": 0.39,
                "2019-08-05T12:00:34": 0.7,
            }
        )
    )


def test_df_df():
    assert main(
        a=pd.DataFrame(
            {
                "a": {
                    "2019-08-01T15:20:12": 3,
                    "2019-08-01T15:44:12": 7,
                    "2019-08-03T16:20:15": 0,
                    "2019-08-05T12:00:34": 2,
                },
                "b": {
                    "2019-08-01T15:20:12": 27,
                    "2019-08-01T15:44:12": 4,
                    "2019-08-03T16:20:15": 5,
                    "2019-08-05T12:00:34": 7,
                },
            }
        ),
        b=pd.DataFrame(
            {
                "a": {
                    "2019-08-01T15:20:12": 1,
                    "2019-08-01T15:44:12": 2,
                    "2019-08-03T16:20:15": 3,
                    "2019-08-05T12:00:34": 2,
                },
                "b": {
                    "2019-08-01T15:20:12": 1,
                    "2019-08-01T15:44:12": 3,
                    "2019-08-03T16:20:15": 2,
                    "2019-08-05T12:00:34": 0,
                },
            }
        ),
    )["product"].equals(
        pd.DataFrame(
            {
                "a": {
                    "2019-08-01T15:20:12": 3,
                    "2019-08-01T15:44:12": 14,
                    "2019-08-03T16:20:15": 0,
                    "2019-08-05T12:00:34": 4,
                },
                "b": {
                    "2019-08-01T15:20:12": 27,
                    "2019-08-01T15:44:12": 12,
                    "2019-08-03T16:20:15": 10,
                    "2019-08-05T12:00:34": 0,
                },
            }
        )
    )


def test_series_empty_base():
    assert main(a=pd.Series(dtype=float), b=2)["product"].empty


def test_series_base_empty():
    assert main(b=pd.Series(dtype=float), a=2)["product"].empty
